@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using TheFoodHood.Web.Data
@using TheFoodHood.Web.Data.Dtos
@using TheFoodHood.Web.Data.Services
@using TheFoodHood.Web.Data.Entities

@inject IArticuloService ArticuloService
@inject IDetallePedidoService DetallePedidoService
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Inicio</PageTitle>

<div class="shared-background">
    <div class="header-menu">
        <div class="logo-container">
            <img src="img/logo.png" alt="logo" class="logo-img" />
            <span class="logo-text">FoodHood</span>
        </div>

        <div class="menu-title">Menú</div>

        <div class="user-info">
            @if (IsAuthenticated)
            {
                <div class="tipo-usuario">@TipoUsuario</div>
                <form class="logout-form" action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="" />
                    <button type="submit" class="btn-logout">
                        <i class="fas fa-sign-out-alt"></i> CERRAR SESIÓN
                    </button>
                </form>
            }
            else
            {
                <div class="tipo-usuario">Invitado</div>
                <a href="/Account/Login" class="btn-logout">INICIAR SESIÓN</a>
            }
        </div>
    </div>

    @if (mostrarMensaje)
    {
        <div class="mensaje-exito-carrito">
            @mensajeCarrito
        </div>
    }

    <div class="productos-search">
        <button class="btnfiltro" @onclick="@(() => FiltrarCategoria("Todos"))">Todos</button>
        <input type="text" class="form-control" placeholder="Buscar articulos..."
               value="@searchTerm"
               @oninput="OnSearchChanged" />
    </div>

    <div class="categories-container">
        @foreach (var categoria in categorias)
        {
            <button class="category-button @(categoriaSeleccionada == categoria.Nombre ? "selected" : "")"
                    @onclick="@(() => FiltrarCategoria(categoria.Nombre))">
                <img src="@categoria.Imagen" alt="@categoria.Nombre" />
                <span>@categoria.Nombre</span>
            </button>
        }
    </div>

    @if (productosFiltrados.Count == 0)
    {
        <h2 class="ion-text-center">No hay articulos disponibles</h2>
    }

    @if (productosFiltrados.Count > 0)
    {
        <div class="productos-container">
            @foreach (var producto in productosFiltrados)
            {
                <div class="producto-card">
                    <img src="@producto.ImagenUrl" alt="@producto.Nombre" class="producto-img" />
                    <div class="producto-info">
                        <strong>@producto.Nombre</strong>
                        <span>@producto.Descripcion</span>
                    </div>
                    <div class="producto-footer">
                        <span class="precio">RD$ @producto.Precio.ToString("N2")</span>

                        @if (TipoUsuario == "cliente")
                        {
                            <button class="btn-carrito" @onclick="() => AgregarAlPedidoTemporal(producto)">
                                <i class="bi bi-cart"></i>
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private record Categoria(string Nombre, string Imagen);

    private List<Categoria> categorias = new()
    {
        new Categoria("Hamburger", "/img/hamburger.png"),
        new Categoria("Hot Dogs", "/img/Hotdog.png"),
        new Categoria("Tacos", "/img/tacos.png"),
        new Categoria("Yaroas", "/img/yaroa.png"),
        new Categoria("Burritos", "/img/Burrito.png"),
        new Categoria("Pizzas", "/img/Pizza.png")
    };

    private string searchTerm = string.Empty;
    private string categoriaSeleccionada = "Todos";
    private string TipoUsuario = "invitado";
    private string UsuarioId = "0";
    private bool IsAuthenticated = false;

    private List<ArticulosDtos> productos = new();
    private List<ArticulosDtos> productosFiltrados = new();

    private string mensajeCarrito = "";
    private bool mostrarMensaje = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (IsAuthenticated)
        {
            var email = user.Identity?.Name;
            var appUser = await UserManager.FindByEmailAsync(email);

            TipoUsuario = appUser?.TipoUsuario?.ToLower() ?? "invitado";
            UsuarioId = appUser?.Id ?? "0";
        }

        productos = ArticuloService.Consultar();
        productosFiltrados = productos;
    }

    private void FiltrarCategoria(string categoria)
    {
        categoriaSeleccionada = categoria;
        filtrarProductos();
    }

    private void filtrarProductos()
    {
        productosFiltrados = productos
            .Where(p =>
                (categoriaSeleccionada == "Todos" || p.CategoriaNombre == categoriaSeleccionada) &&
                (string.IsNullOrWhiteSpace(searchTerm) || p.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ).ToList();
    }

    private async Task AgregarAlPedidoTemporal(ArticulosDtos producto)
    {
        if (!PedidoTemporalStore.PedidosPorUsuario.TryGetValue(UsuarioId, out var pedido))
        {
            pedido = new PedidosDtos
            {
                UsuarioId = UsuarioId,
                Estado = "pendiente",
                FechaPedido = DateTime.Now,
                Total = 0,
                TipoEntrega = "",
                Direccion = "",
                Delivery = "",
                Detalles = new List<DetallePedidosDtos>()
            };

            PedidoTemporalStore.PedidosPorUsuario[UsuarioId] = pedido;
        }

        var detalleExistente = pedido.Detalles.FirstOrDefault(d => d.ArticuloId == producto.Id);
        if (detalleExistente != null)
        {
            detalleExistente.Cantidad += 1;
        }
        else
        {
            pedido.Detalles.Add(new DetallePedidosDtos
            {
                ArticuloId = producto.Id,
                Cantidad = 1
            });
        }

        mensajeCarrito = $"✅ {producto.Nombre} Agregado en el carrito.";
        mostrarMensaje = true;
        await OcultarMensajeEn3Segundos();
    }

    private async Task OcultarMensajeEn3Segundos()
    {
        await Task.Delay(2000);
        mostrarMensaje = false;
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        filtrarProductos();
    }
}
