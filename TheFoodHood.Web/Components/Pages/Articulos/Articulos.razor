@page "/articulos"
@inject IArticuloService ArticuloService
@inject NavigationManager Navigation
@inject IJSRuntime JS

@using TheFoodHood.Web.Data.Dtos
@using TheFoodHood.Web.Data.Services


<PageTitle>Artículos</PageTitle>

<div class="shared-background">
    <!-- HEADER -->
    <div class="header-menu">
        <img src="assets/img/logo.png" alt="logo" class="logo-img" />
        <h1 class="menu-title">Productos</h1>
        <div class="user-info">
            <span>Admin</span>
        </div>
    </div>

    <!-- CONTROLES -->
    <div class="productos-controls">
        <h2 class="productos-subtitulo">Lista de productos</h2>

        <div class="productos-search">
            <input type="text" class="form-control"
                   placeholder="Buscar productos..."
                   @bind="searchTerm" @bind:event="oninput" />
        </div>

        <a href="/agregar-articulos" class="btn btn-outline-danger agregar-nuevo text-center">
            Agregar Nuevo
        </a>

    </div>

    <hr class="divider" />

    <!-- SIN PRODUCTOS -->
    @if (productosFiltrados.Count == 0)
    {
        <div class="text-center">
            <h2>No hay productos disponibles</h2>
        </div>
    }

    <!-- LISTA DE PRODUCTOS -->
    <div class="productos-container" hidden="@(!productosFiltrados.Any())">
        @foreach (var producto in productosFiltrados)
        {
            <div class="producto-card">
                <div class="producto-img-container">
                    <img src="@producto.ImagenUrl" alt="@producto.Nombre" class="producto-img" />
                    <span class="producto-precio">$ @producto.Precio</span>
                </div>

                <h3 class="producto-nombre">@producto.Nombre</h3>
                <p class="producto-desc">@producto.Descripcion</p>

                <!-- BOTONES DE CADA PRODUCTO -->
                <div class="producto-botones">
                    <a href="/agregar-articulos/@producto.Id" class="btn btn-outline-secondary btn-sm">Modificar</a>

                    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="@(() => ConfirmarEliminar(producto.Id))">Eliminar</button>



                </div>

            </div>
        }
    </div>
</div>

@code {
    private List<ArticulosDtos> productos = new();
    private List<ArticulosDtos> productosFiltrados = new();
    private string searchTerm = string.Empty;

    protected override void OnInitialized()
    {
        CargarProductos();
    }

    private void CargarProductos()
    {
        productos = ArticuloService.Consultar();
        FiltrarProductos();
    }

    private async Task ConfirmarEliminar(int id)
    {
        var confirmado = await JS.InvokeAsync<bool>("confirm", "¿Seguro que deseas eliminar este producto?");
        if (confirmado)
        {
            await EliminarProducto(id);
        }
    }

    private async Task EliminarProducto(int id)
    {
        var eliminado = ArticuloService.Eliminar(id);
        if (eliminado)
        {
            await JS.InvokeVoidAsync("alert", "Producto eliminado correctamente.");
            CargarProductos(); // recargar y filtrar
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al eliminar el producto.");
        }
    }






    private void FiltrarProductos()
    {
        var term = searchTerm.ToLower();
        productosFiltrados = productos
            .Where(p =>
                p.Nombre.ToLower().Contains(term) ||
                p.Descripcion.ToLower().Contains(term))
            .ToList();
    }

  
}
